// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import { AddressManager } from "../../contracts/common/AddressManager.sol";
import { IBridge, Bridge } from "../../contracts/bridge/Bridge.sol";
import { BridgeErrors } from "../../contracts/bridge/BridgeErrors.sol";
import { EtherVault } from "../../contracts/bridge/EtherVault.sol";
import { console2 } from "forge-std/console2.sol";
import { LibBridgeStatus } from
    "../../contracts/bridge/libs/LibBridgeStatus.sol";
import { LibBridgeData } from "../../contracts/bridge/libs/LibBridgeData.sol";
import { LibTrieProof } from "../../contracts/libs/LibTrieProof.sol";

import { SignalService } from "../../contracts/signal/SignalService.sol";
import {
    TestBase,
    SkipProofCheckBridge,
    DummyCrossChainSync,
    GoodReceiver,
    BadReceiver
} from "../TestBase.sol";

contract TestProof is TestBase {
    function setUp() public {
        console2.log("??");
    }

    function test_proof_return_value() public view {
        console2.log("1");
        bytes memory fullProof =
            hex"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000380c5ee1c9a1dd8cf30169da487a86ffc83384cb0fde167dc77ce837eb3dda929aa1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493470000000000000000000000000f35b0753e261375c9a6cb44316b4bdc7e765509236dbb61a3a76442222fdd8ba9784f373dce6ecffc798d7507327017211578ee56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b42156e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363bf1150000000000000000000000000000000000000000000000000000000001c9c38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065167e540000000000000000000000000000000000000000000000000000000000000300d84a60dfbb4021d915d546cc81717991dd8ca4592216d700c7843cf46dae7ab8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a75a54b6a5ba33118769836d05c56615ac1dc426efd3b44ab103cfaa10194430744ad2ba0000000000000000000000000000000000000000000000000000000000000019d883010b06846765746888676f312e32302e33856c696e7578000000000000000000000000000000000000000000000000000000000000000000000000000a60000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000217b90214f90211a0767c51855b55dbc9b6cc2245f683917f792ae93a1ea348f383fddb0da978bae6a031e922169cc157a48c3384782c78268f3763599a71442f683093d56bf65ad86ca00ffab43f63691112f7ed67c6299fd5c6391b8f34317e3c3cb0ff0b946662ac4ea03e5f7d576dec574a91a44de0f4ed60698d3dbb722b622d2d3a7217dc5bfbaa7ca0a96d37bf6fac6b288ee27b6d4375ff2911b56a82d27c9d3e3f640cb9d8e113a3a01ac0b46f66dbe8b0204ce299cd60ed7d88f7b195c79b1fe0fd952cdf55580cf7a094cee707a92000c65fdb124bc8dffbe35581f93c2e5f6db5bee0d13895fb865aa0005e586663327abad2741eb1b7531457a4e75dc4e93a81570b639b55c7268bb9a015e900d5561d55ace953ed52700956d2ef8d068ba0cc36b42abf2b272eea660ca0cd5471b222d2f9fc099adaa0a7fd1402301ae84caf3f7e643fd84b2dbbcee209a0e7e0c3cd4d591a6ce227dc8ae72b04ecc0ea2876520e7f33dc01e683946c9443a037edb6237f4c02876382af80fa1c79970db1d6309810d9897ed855510f6ae9eda05276e6711429a3f91b6ddf7487a9595f7f7df3ab6263cf1ff65393a848e8f21ba035f43b66a12acc9ab76ad98077c07539bf193202dc3d17e2248b4374d3d68d27a0a2ebd09909a99185a91b3346aea121a4fdb0d82f96851ac144565667c2fdb8e9a079524a3610c85224c4b8beffee9e8da3089fd62f90e0436c9c30777b484892408000000000000000000000000000000000000000000000000000000000000000000000000000000007b4f907b1b90214f90211a0ef723fdbf22d3db48e65e48d6f5f2cf43d55b3ae3254f266e1d4740b2d6b3c67a09ca23585d0be02ab2332ca5b719f1e1a1ef100201229c4a93e59270756327038a00ead818522c5148ecd485fe0929be7308987d770aabfc5ddbe25f14b476f6d7fa013f94e6fe9221dff3072ddac5f06f07cdc24b17248533c5b4ef3d3553c0a2bb2a041071a6b6fcf7e38813e0ade0f676ed1b743887bfdc04027be9ebcb9d48ddda3a017cda483fa8b3b31d74194b2744a35a859e765ec9b74111518fd01dcb9f65ae1a0175847b0c909209bacef20e31d88f26fb115fd7cbe3696c4c01cba6e2fedbdc7a089dbf36e1494d7fb68ff6374bfd836261fdd62107096b81d222fa2fb600e0010a07f7fb931b223a52a5a74dc6654a6d343bd47edf19af19d77dac4b0828c22a8a5a04179654698e1fc4d924900b195f69215ff908fc03ab1bf5a0c0a0ebffc89b62ba04fbb9128e74d36da4173ee20d901c832db2298d6ff1eba99cdc412d44b98b540a07ef7c8df8669cf63eb129eeead1216d9b6860bc147054d6b6e9c089b3749b314a09e541e27e02d241b5396ee802ef89e32ff88524cf95cee5614cde90529c184a1a0461bd12222919786d87156ce7a7cc349795690a50ce1ed8f0fed961ed20a85eba0a4cec1a027646a6294937c5d2e137bb85c16572e7c1b4196118f2105c235c130a0249952d6df978ba5a48e690882264e012f69d0240b5d64fbdf8f8d922b75d75980b90214f90211a099b9fd0a3889a765ddd3a4ed956b425cff6893c256f591aed773b4779dbf9c86a08c7f99f5d4f7d4d0bc30f5bd3e95f000cd68a1e07b51b4b4467f2489ccc1b9fea0bf00834567a2d83304bd01a3296b8ac32ffba2765a770baf66c9be72d8d0e334a098e8943addc5fc74b2324923d456524070fdd8483a2fcbcb82f103fe5c276a19a0960de78d354f96c0396e843f21aeae52168a0813d6aeddc7dd6af9cbfe2984b7a05166be0718ffb9c5e8cdbf873cf7ea4a9547704898ef3ba62c4e6e8f655dffa6a05ecf635c8bffca63d60a6476b0b07916d9ae60f4d5b1e29acbc9726af41a8e29a072dafde34ad7a59dac8235c08a3bcae770efda4eb24f3c765f7c3f603dd031a1a03deb875e7e099bb7a770d913bcca7db60cb9cebdc27a18f7c2e5254913df43dda0a3ae121c23ae925dd1993752b80ed85677ea16fecdae32f47bab0f62071ce198a0c798e67a1504f155b557fbcd575d3dbab07f5c100d992daaabda0a77ad660ac6a049290c826347649e1f64bc372969ebebc7fa66c10d7a5c8b94adabd00936c558a08e806c29b8d13e26fe8b95b84d76cf1e6578fdb4910060e126064ce00f24c113a0c70fb947397d4ad62d11e90b20a578e6cf884b541c1bfe60a189da64d81c0c50a00436726f9a23f35aef2f6bf766ef3a7e2dd64f1242c7ce7699e8b9dfba6f3c2ba0762da54bad75d7b9a5f12dcc094ea488140ba4589161573a6d2bb70a4c2dc1cc80b90214f90211a09bd7b815560f00599109bbac28ee279746d1384bd63801214d1e21e6c206baf7a0e6adc3f05965936b91ef172bd3cbe61aaf044fe5b56ba0a7684e73a534d5f55ba0353f3e0e1ad183d82304953b874b1c946ed0ae9cbe1de720a67f7bc8bedb5078a0013042df4eec2b7925135371ec539c65f37a730a6bd3333aa2f0fba16d36765fa0c82e87745d1787ab772aaf1bf503aa07cdc945ee68f393bb73630643d8f94591a09557dda30079d53f6a9af08ec12b500a0b3137e2b31d8df85eee00fdf27eea2ea03418a095bde9c61b0a90999ae8f7d8e15447f2aa8f22cf96f2a13a3aba50afd4a049ed985468d7fcd7ac1a6510226e2e451e9c6019f2212b8a992180ece55293faa0598fb64602ac88ca0bdb1fcb0c87813319095c79d4d06674001d7a6a54dbe734a0a5632a2c9e188243fcdf83f536b52a12c82136316474df1ac906f5f27e00308ca0254c7cdf08b082dde89e0125fd71cbe538eabec88cbec74db7325fcda578d26ba04505711e58843339eb47c4420a6fe9c0dd18aff873a29b3722437e1fb52c7311a0df9ff59898993fc9333ca22ff2651061c551ce762374562969a21f8a91db30b3a053e69c140e545076a3860c79f1735112c501f27aff0b502700fe313027bdaa8fa0390ff12504836bec2c574d0c5a85a5b29bdeb385ba2d3a9f14cf0a0f86e3c905a01ac1a0425d48f2313cbb70f90da4c0a4dae4c34d2b70f8c7981da99faed661a380b8f3f8f180a0f305f710e9eb7f408b410002c1e937c3cec041ff03bc14baec9216799dea8523a09aa7a8181720a1cd76192670ece3bcb0b88814e688010c26231c2ad3b10e99cea0a1c5a0c625e4d168d71b07026e7073ac64a13b136fc385e94b686a86970f4fefa06c383af5d3ffb13c48e98942096865eec640c0fb4140f1d5b7dc204ccc4cb1fd80a0b0d40c5bcc9edd4ae8c91f7e8840bb6c5383a198c388bbfe2acee6cca21b43fea015e817d4dbbe5bbfed671691c35153674d0b5aadab974909512282c5cced5718a07cf9fff774e0bea14b3de3641175ca20e50c17545141fdb6d4674bc2ec3bc7f88080808080808080b853f85180808080a0fed2f27d0178b5d28de245882eb9e2655d609bc0c91bc042bd0cacb49fd3041180808080a084d6f164caff4daeb72e2798f496ae9e064947d0f309107b160e53a606b5c84080808080808080a1e09e327dd45183a3309488ca9f92624ab0771093111c4b2232e7f06bd7ba26af03000000000000000000000000";

        console2.log("2");
        LibBridgeData.StatusProof memory sp =
            abi.decode(fullProof, (LibBridgeData.StatusProof));

        console2.log("3");
        bool result = LibTrieProof.verifyWithFullMerkleProof({
            stateRoot: 0x47223f3df7c27a6c88380e34da90d6482fdc7a7409644da1d84f04ae69db8bc3,
            addr: 0x5293Bb897db0B64FFd11E0194984E8c5F1f06178,
            slot: 0x75499d439799531ca5a6ab282fa07bbd259992d8620617b00bf78d7a6c2f6169, // We
                // need this: getMessageStatusSlot(msgHash)
            value: bytes32(uint256(LibBridgeStatus.MessageStatus.FAILED)),
            mkproof: sp.proof
        });

        console2.log(result);
    }
}
