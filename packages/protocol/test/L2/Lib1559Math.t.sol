// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import { StringsUpgradeable as Strings } from
    "@ozu/utils/StringsUpgradeable.sol";
import { console2 } from "forge-std/console2.sol";
import { TestBase } from "../TestBase.sol";
import { Lib1559Math } from "../../contracts/L2/Lib1559Math.sol";

contract Lib1559MathTest is TestBase {
    // Some data from A5 testnet
    uint32[2][200] private data = [
        // [ timestamp, gasUsed ]
        [1_695_898_920, 5_874_459],
        [1_695_898_920, 5_874_447],
        [1_695_898_920, 5_874_447],
        [1_695_898_920, 7_466_164],
        [1_695_898_920, 558_988],
        [1_695_898_920, 167_644],
        [1_695_898_932, 5_542_994],
        [1_695_898_932, 5_564_006],
        [1_695_898_932, 5_874_471],
        [1_695_898_932, 7_288_768],
        [1_695_898_944, 5_874_531],
        [1_695_898_944, 5_885_789],
        [1_695_898_944, 8_003_412],
        [1_695_898_944, 8_147_192],
        [1_695_898_956, 127_856],
        [1_695_898_956, 5_542_946],
        [1_695_898_956, 5_542_922],
        [1_695_898_956, 7_183_477],
        [1_695_898_956, 8_122_973],
        [1_695_898_956, 127_856],
        [1_695_898_956, 167_656],
        [1_695_898_968, 6_020_671],
        [1_695_898_968, 6_020_587],
        [1_695_898_968, 5_874_435],
        [1_695_898_968, 368_193],
        [1_695_898_968, 2_201_225],
        [1_695_898_968, 127_856],
        [1_695_898_968, 127_856],
        [1_695_898_968, 5_709_170],
        [1_695_898_980, 709_840],
        [1_695_898_992, 5_874_483],
        [1_695_898_992, 7_541_559],
        [1_695_898_992, 8_076_757],
        [1_695_898_992, 8_109_749],
        [1_695_898_992, 167_656],
        [1_695_899_004, 127_856],
        [1_695_899_004, 5_874_423],
        [1_695_899_004, 6_976_856],
        [1_695_899_004, 7_606_559],
        [1_695_899_004, 6_149_335],
        [1_695_899_004, 8_060_875],
        [1_695_899_016, 127_856],
        [1_695_899_016, 6_000_160],
        [1_695_899_016, 6_003_644],
        [1_695_899_016, 5_952_839],
        [1_695_899_016, 8_113_115],
        [1_695_899_016, 167_656],
        [1_695_899_040, 5_874_423],
        [1_695_899_040, 5_542_934],
        [1_695_899_040, 5_707_398],
        [1_695_899_040, 6_400_291],
        [1_695_899_040, 127_844],
        [1_695_899_040, 8_128_030],
        [1_695_899_052, 5_874_471],
        [1_695_899_052, 5_874_591],
        [1_695_899_052, 6_868_026],
        [1_695_899_052, 7_558_106],
        [1_695_899_052, 631_778],
        [1_695_899_052, 167_656],
        [1_695_899_064, 5_543_030],
        [1_695_899_064, 5_874_519],
        [1_695_899_064, 7_641_644],
        [1_695_899_064, 7_310_929],
        [1_695_899_064, 127_856],
        [1_695_899_064, 746_907],
        [1_695_899_076, 127_856],
        [1_695_899_076, 5_874_567],
        [1_695_899_076, 5_542_970],
        [1_695_899_076, 5_874_483],
        [1_695_899_076, 5_543_174],
        [1_695_899_076, 7_762_547],
        [1_695_899_112, 1_721_407],
        [1_695_899_112, 5_874_435],
        [1_695_899_112, 5_874_603],
        [1_695_899_112, 5_942_242],
        [1_695_899_112, 6_867_022],
        [1_695_899_124, 127_844],
        [1_695_899_124, 127_844],
        [1_695_899_124, 127_844],
        [1_695_899_124, 127_844],
        [1_695_899_124, 127_844],
        [1_695_899_124, 127_844],
        [1_695_899_124, 7_661_874],
        [1_695_899_124, 8_039_291],
        [1_695_899_124, 8_125_626],
        [1_695_899_124, 8_161_340],
        [1_695_899_136, 174_012],
        [1_695_899_136, 7_854_952],
        [1_695_899_136, 7_030_558],
        [1_695_899_136, 7_795_589],
        [1_695_899_136, 8_075_570],
        [1_695_899_148, 6_335_340],
        [1_695_899_148, 127_856],
        [1_695_899_148, 127_856],
        [1_695_899_148, 7_030_522],
        [1_695_899_148, 7_076_630],
        [1_695_899_148, 7_159_659],
        [1_695_899_148, 8_055_391],
        [1_695_899_160, 5_874_411],
        [1_695_899_160, 5_874_495],
        [1_695_899_160, 5_542_994],
        [1_695_899_160, 7_276_645],
        [1_695_899_160, 8_121_826],
        [1_695_899_208, 127_844],
        [1_695_899_208, 7_684_697],
        [1_695_899_208, 167_644],
        [1_695_899_220, 127_856],
        [1_695_899_220, 181_480],
        [1_695_899_220, 181_768],
        [1_695_899_220, 402_754],
        [1_695_899_220, 947_260],
        [1_695_899_220, 127_856],
        [1_695_899_220, 127_856],
        [1_695_899_220, 354_622],
        [1_695_899_220, 293_063],
        [1_695_899_220, 127_856],
        [1_695_899_220, 127_856],
        [1_695_899_220, 253_557],
        [1_695_899_220, 293_063],
        [1_695_899_220, 127_856],
        [1_695_899_220, 127_856],
        [1_695_899_220, 127_856],
        [1_695_899_220, 127_856],
        [1_695_899_220, 5_874_411],
        [1_695_899_220, 5_542_958],
        [1_695_899_220, 5_542_970],
        [1_695_899_220, 127_856],
        [1_695_899_220, 6_803_349],
        [1_695_899_232, 373_838],
        [1_695_899_232, 332_863],
        [1_695_899_256, 7_340_895],
        [1_695_899_256, 8_046_524],
        [1_695_899_256, 8_071_182],
        [1_695_899_256, 8_143_841],
        [1_695_899_280, 1_132_269],
        [1_695_899_280, 1_177_294],
        [1_695_899_280, 5_542_946],
        [1_695_899_280, 5_874_459],
        [1_695_899_280, 5_874_507],
        [1_695_899_280, 6_823_001],
        [1_695_899_280, 167_673],
        [1_695_899_292, 6_020_875],
        [1_695_899_292, 7_365_318],
        [1_695_899_292, 8_020_633],
        [1_695_899_292, 8_153_163],
        [1_695_899_316, 127_856],
        [1_695_899_316, 302_573],
        [1_695_899_316, 127_856],
        [1_695_899_316, 890_846],
        [1_695_899_316, 5_874_519],
        [1_695_899_316, 6_017_584],
        [1_695_899_316, 7_054_177],
        [1_695_899_316, 8_031_127],
        [1_695_899_316, 167_673],
        [1_695_899_328, 127_856],
        [1_695_899_328, 5_874_483],
        [1_695_899_328, 6_013_580],
        [1_695_899_328, 7_897_045],
        [1_695_899_328, 1_695_780],
        [1_695_899_328, 6_285_636],
        [1_695_899_328, 571_061],
        [1_695_899_340, 5_874_555],
        [1_695_899_340, 5_564_030],
        [1_695_899_340, 6_898_666],
        [1_695_899_340, 8_017_679],
        [1_695_899_340, 167_656],
        [1_695_899_352, 5_874_423],
        [1_695_899_352, 5_874_555],
        [1_695_899_352, 5_874_579],
        [1_695_899_352, 7_555_047],
        [1_695_899_352, 167_656],
        [1_695_899_376, 1_097_851],
        [1_695_899_376, 6_596_754],
        [1_695_899_376, 127_856],
        [1_695_899_376, 5_543_030],
        [1_695_899_376, 5_542_958],
        [1_695_899_376, 5_874_543],
        [1_695_899_376, 393_128],
        [1_695_899_376, 8_093_010],
        [1_695_899_388, 5_874_543],
        [1_695_899_388, 127_856],
        [1_695_899_388, 5_542_946],
        [1_695_899_388, 7_614_074],
        [1_695_899_388, 7_903_077],
        [1_695_899_388, 7_662_418],
        [1_695_899_388, 127_856],
        [1_695_899_388, 533_644],
        [1_695_899_400, 167_656],
        [1_695_899_412, 127_856],
        [1_695_899_412, 5_542_946],
        [1_695_899_412, 5_874_483],
        [1_695_899_412, 7_710_236],
        [1_695_899_412, 6_379_113],
        [1_695_899_412, 8_136_220],
        [1_695_899_424, 5_874_435],
        [1_695_899_424, 5_895_459],
        [1_695_899_424, 5_542_946],
        [1_695_899_424, 243_792],
        [1_695_899_424, 127_856],
        [1_695_899_424, 7_513_471]
    ];

    uint256 n = data.length;

    function test_1559_2() public view {
        Lib1559Math.calcBaseFeePerGasFromPool(
            1_381_761_301_202_500_000_000_000_000,
            10_000_000_000,
            37_172_050_000,
            127_779,
            0,
            127_856
        );

        Lib1559Math.calcBaseFeePerGas(9_768_144_865, 5_874_423, 3_717_205);
    }

    function test_1559_vanilla() public view {
        uint256 totalGas;

        for (uint64 i = 0; i < n; i++) {
            uint32 gasUsed = data[i][1];
            totalGas += gasUsed;
        }

        // Vanilla 1559 variables
        uint256 baseFeePerGas = 10 * 1_000_000_000; // 10 Gwei
        uint256 blockGasTarget = totalGas / n;

        // AMM 1559 variables
        uint256 gasInPool = blockGasTarget * 50;
        uint256 poolProduct = baseFeePerGas * gasInPool * gasInPool;
        uint256 gasIssuePerSecond = 1_750_000;
        uint256 maxGasInPool = gasInPool * 8;

        uint256 poolUpdatedAt = data[0][0];

        console2.log("blockGasTarget", blockGasTarget);

        for (uint64 i = 0; i < n; i++) {
            uint64 time = data[i][0];
            uint32 gasUsed = data[i][1];

            baseFeePerGas = Lib1559Math.calcBaseFeePerGas(
                baseFeePerGas, gasUsed, blockGasTarget
            );

            uint256 ammBaseFee;

            uint256 blocktime;
            if (time >= poolUpdatedAt) {
                blocktime = time - poolUpdatedAt;
                poolUpdatedAt = time;
            }

            (ammBaseFee, gasInPool) = Lib1559Math.calcBaseFeePerGasFromPool(
                poolProduct,
                gasIssuePerSecond,
                maxGasInPool,
                gasInPool,
                blocktime,
                gasUsed
            );

            string memory str = string.concat(
                Strings.toString(time),
                ",",
                Strings.toString(gasUsed),
                ",",
                Strings.toString(baseFeePerGas),
                ",",
                Strings.toString(ammBaseFee),
                ",",
                Strings.toString(gasInPool)
            );

            console2.log(str);
        }
    }
}
